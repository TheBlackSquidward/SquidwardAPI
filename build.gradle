buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://sizableshrimp.me/maven' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'me.sizableshrimp.parchmenttest', name: 'ForgeGradle', version: '5.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.8-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
group = "${mod_base_package}.${mod_id}"
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'fml.earlyprogresswindow','false'

            mods {
                resourcechickens {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow','false'

            mods {
                resourcechickens {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'resourcechickens', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                resourcechickens {
                    source sourceSets.main
                }
            }
        }
    }
}


dependencies {
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    compileOnly 'org.jetbrains:annotations:21.0.1'

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

def resource_targets = ["META-INF/mods.toml", "pack.mcmeta"]
task replaceResources(type: Copy) {
    dependsOn(jar)
    outputs.upToDateWhen { false }
    def spec = copySpec {
        from(sourceSets.main.resources) {
            include resource_targets
            expand "project": project, "mod_id": mod_id, "mod_name": mod_name, "mod_version": mod_version,
                    "mod_authors": mod_authors, "mod_description": mod_description,
                    "minecraft_version_range": minecraft_version_range, "forge_version_range": forge_version_range,
                    "loader_version_range": loader_version_range
        }
    }
    with spec
    into "$buildDir/resources/main/"
    // If IntelliJ's output dir exists, copy it there as well
    if (new File("$rootDir/out/production/${project.name}.main/").exists()) {
        copy {
            with spec
            into "$rootDir/out/production/${project.name}.main/"
        }
    }
    // If Eclipse's output dir exists, copy it there as well
    if (new File("$rootDir/bin/main/").exists()) {
        copy {
            with spec
            into "$rootDir/bin/main/"
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.FAIL
    // Exclude the resource targets as we manually handle those and don't want them to invalidate our cache
    exclude resource_targets
    finalizedBy replaceResources
}


jar {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": mod_version,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
